@{
    ViewData["Title"] = "Clients page";
}
<h1>@ViewData["Title"]</h1>

<p>Clients page</p>

<!DOCTYPE html>
<html>

<head>

    <link rel="stylesheet" href="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps.css" type="text/css" />
    <script type="text/javascript" src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps-web.min.js"></script>

    <style>


        #client-page {
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            height: 90vh;
            width: 100%;
        }

        #request-form {
            margin-bottom: 50px;
        }

        #map {
            width: 100%;
            height: 60%;
        }

        .marker-border {
            background: orange;
            border-radius: 50%;
            height: 40px;
            width: 40px;
        }

        .marker-icon {
            background-position: center;
            background-size: 25px 20px;
            position: absolute;
            left: 7.5px;
            top: 10px;
            height: 20px;
            width: 25px;
        }

        .marker-info {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .mapboxgl-popup-content {
            border-radius: 10px;
        }

    </style>

</head>

<body>

    <div id="client-page">

        <form id="request-form">
            <div class="form-group">
                <label for="destination">Where are you going?</label>
                <input type="text" class="form-control" id="destination" name="destination" />
            </div>

            <div class="form-group text-center pt-1 mt-4">
                <button type="button" id="locationButton" class="btn btn-primary" onclick="toggleLocationSharing()">Request Taxi</button>
            </div>
        </form>


        <div id="map"></div>

    </div>

    <script type="text/javascript">

        let map;
        let marker;
        let driverMarker;
        let sharingLocation = false;
        const button = document.getElementById('locationButton');
        const input = document.getElementById('destination');

        function sendLocationToServer(longitude, latitude) {
            const locationData = {
                longitude: longitude,
                latitude: latitude
            };

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/Client/UpdateLocation', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            const jsonData = JSON.stringify(locationData);
            xhr.send(jsonData);
        }

        function shareLocation() {
            navigator.geolocation.getCurrentPosition(
                newPosition => {
                    const newDriverPosition = [newPosition.coords.longitude, newPosition.coords.latitude];
                    marker.setLngLat(newDriverPosition);
                    sendLocationToServer(newDriverPosition[0], newDriverPosition[1]);
                },
                error => {
                    console.error('Error getting user location:', error);
                },
                {
                    enableHighAccuracy: true
                }
            );
        }

        function updateDestination(destination, visibility) {
            const data = {
                newDestination: destination,
                newVisibility: visibility,
            };

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/Client/UpdateDestination', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            const jsonData = JSON.stringify(data);
            xhr.send(jsonData);
        }

        function toggleLocationSharing() {

            if (!sharingLocation) {
                // Start sharing location
                sharingLocation = true;
                button.innerHTML = 'Cancel Request';

                interval = setInterval(function () {
                    clientClaimedBy().then(driver => {
                        if (driver != null) {
                            updateDriverMarker(driver);
                        }
                        shareLocation();
                    });
                }, 6000); // Repeat every 6 seconds

                updateDestination(input.value, true);
                console.log("Start");

            }
            else {
                // Stop sharing location
                sharingLocation = false;
                button.innerHTML = 'Request Taxi';
                clearInterval(interval);
                sendLocationToServer(90, 90);
                updateDestination("", false);
                console.log("Stop");
            }
        }

        function clientClaimedBy() {
            return fetch(`/Client/ClientClaimedBy`)
                .then(response => response.json())
                .catch(error => {
                    console.error('Error fetching driver:', error);
                });
        }

        function updateDriverMarker(driver) {

            const driverPosition = [driver.longitude, driver.latitude];

            if (driverMarker && driverMarker.getElement() && driverMarker.getPopup()) {
                driverMarker.setLngLat(driverPosition);

                const driverMarkerDiv = driverMarker.getPopup().getElement();

                // Check if the required elements inside the popup exist
                if (driverMarkerDiv) {
                    const plateNumber = driverMarkerDiv.querySelector('p.plate');
                    const name = driverMarkerDiv.querySelector('p.name');

                    // Update the elements if they exist
                    if (plateNumber) plateNumber.innerText = driver.plateNumber;
                    if (name) name.innerText = driver.fullName;

                }
            }
            else {
                let driverMarkerDiv = document.createElement('div');
                driverMarkerDiv.innerHTML =
                    `
                            <p class="plate">${driver.plateNumber}</>
                            <p class="name">${driver.fullName}</p>
                        `;

                let driverMarkerPopup = new tt.Popup({
                    closeButton: false,
                    offset: 25,
                    anchor: 'bottom'
                }).setDOMContent(driverMarkerDiv);

                let driverMarkerBorder = document.createElement('div');
                driverMarkerBorder.className = 'marker-border';
                driverMarkerBorder.style.background = 'yellow';

                let driverMarkerIcon = document.createElement('div');
                driverMarkerIcon.className = 'marker-icon';
                driverMarkerIcon.style.backgroundImage = 'url(/images/taxi-icon.png)';
                driverMarkerBorder.appendChild(driverMarkerIcon);

                driverMarker = new tt.Marker({
                    element: driverMarkerBorder
                }).setLngLat(driverPosition).setPopup(driverMarkerPopup);


                driverMarker.addTo(map);
            }
        }

        function initMap() {
            navigator.geolocation.getCurrentPosition(
                position => {
                    const userPosition = [position.coords.longitude, position.coords.latitude];
                    sendLocationToServer(userPosition[0], userPosition[1]);

                    map = tt.map({
                        key: "MVjOYcUAh8yzcRi8zYnynWAhvqtASz8G",
                        container: 'map',
                        center: userPosition,
                        zoom: 13
                    });
                    let div = document.createElement('div');
                    div.innerHTML = '<p>You</p>';

                    let popup = new tt.Popup({
                        closeButton: false,
                        offset: 25,
                        anchor: 'bottom'
                    }).setDOMContent(div);

                    let border = document.createElement('div');
                    border.className = 'marker-border';

                    let icon = document.createElement('div');
                    icon.className = 'marker-icon';
                    icon.style.backgroundImage = 'url(/images/client-icon.png)';
                    border.appendChild(icon);

                    marker = new tt.Marker({
                        element: border
                    }).setLngLat(userPosition).setPopup(popup);

                    marker.addTo(map);
                },
                error => {
                    console.error('Error getting user location:', error);
                },
                {
                    enableHighAccuracy: true
                }
            );
        }

        window.onload = initMap;
        window.onbeforeunload = function () {
            updateDestination("", false);
            sendLocationToServer(90, 90);
        }
    </script>
</body>

</html>