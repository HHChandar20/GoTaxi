<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps.css" type="text/css" />
    <script type="text/javascript" src="https://api.tomtom.com/maps-sdk-for-web/cdn/6.x/6.25.0/maps/maps-web.min.js"></script>
    <style>
        #taxi-page {
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 90vh;
            width: 100%;
        }

        #map {
            width: 900vw;
            height: 80%;
        }

        .marker-border {
            background: yellow;
            border-radius: 50%;
            height: 40px;
            width: 40px;
        }

        .marker-icon {
            background-position: center;
            background-size: 25px 20px;
            position: absolute;
            left: 7.5px;
            top: 10px;
            height: 20px;
            width: 25px;
        }
    </style>
</head>

<body>
    <div id="taxi-page">
        <div id="map"></div>
    </div>
    <script type="text/javascript">

        let driverMarkers = [];
        let clientMarkers = [];

        function addDriverMarker(driver, counter) {
            const driverPosition = [driver.longitude, driver.latitude];
            console.log("Driver position: ", driverPosition);

            let markerDiv = document.createElement('div');
            markerDiv.innerHTML = `<p>${driver.fullName}</p>`;

            let markerPopup = new tt.Popup({
                closeButton: false,
                offset: 25,
                anchor: 'bottom'
            }).setDOMContent(markerDiv);

            let markerBorder = document.createElement('div');
            markerBorder.className = 'marker-border';
            markerBorder.style.background = 'green';

            let markerIcon = document.createElement('div');
            markerIcon.className = 'marker-icon';
            markerIcon.style.backgroundImage = 'url(/images/taxi-icon.png)';
            markerBorder.appendChild(markerIcon);

            driverMarkers[counter] = new tt.Marker({
                element: markerBorder
            }).setLngLat(driverPosition).setPopup(markerPopup);
        }

        function updateDriverMarker(marker, driver) {
            const driverPosition = [driver.longitude, driver.latitude];
            marker.setLngLat(driverPosition);

            // Check if the marker's element and the 'p' element inside it exist
            const markerElement = marker.getElement();
            if (markerElement) {
                const paragraphElement = markerElement.querySelector('p');
                if (paragraphElement) {
                    paragraphElement.innerText = driver.fullName;
                }
            } else {
                console.error('Marker element not found:', marker);
            }
        }

        function addDriverMarkers(map, drivers) {
            let counter = 0;

            drivers.forEach(driver => {
                if (driverMarkers[counter]) {
                    updateDriverMarker(driverMarkers[counter], driver);
                } else {
                    addDriverMarker(driver, counter);
                    driverMarkers[counter].addTo(map);
                }
                counter++;
            });
        }

        function getNearestDrivers(map, currentPosition) {
            fetch(`/Taxi/GetNearestDrivers?currentDriverLongitude=${currentPosition[0]}&currentDriverLatitude=${currentPosition[1]}`)
                .then(response => response.json())
                .then(nearestDrivers => {
                    console.log(nearestDrivers);
                    if (Array.isArray(nearestDrivers)) {
                        addDriverMarkers(map, nearestDrivers);
                    } else {
                        console.error('Invalid response format:', nearestDrivers);
                    }
                })
                .catch(error => {
                    console.error('Error fetching nearest drivers:', error);
                });
        }

        function updateClientMarker(marker, client) {
            const clientPosition = [client.longitude, client.latitude];

            // Check if the marker is defined and has an element and popup
            if (marker && marker.getElement() && marker.getPopup()) {
                marker.setLngLat(clientPosition);

                const markerDiv = marker.getPopup().getElement();
                // Check if the required elements inside the popup exist
                if (markerDiv) {
                    const h3Element = markerDiv.querySelector('h3');
                    const pElement = markerDiv.querySelector('p');
                    const h6Element = markerDiv.querySelector('h6');
                    const reportsElement = markerDiv.querySelector('p.reports');

                    // Update the elements if they exist
                    if (h3Element) h3Element.innerText = client.fullName;
                    if (pElement) pElement.innerText = client.email;
                    if (h6Element) h6Element.innerText = client.phoneNumber;
                    if (reportsElement) reportsElement.innerText = `Reports: ${client.reports}`;
                }
            } else {
                console.error('Invalid marker or missing elements:', marker);
            }
        }

        function updateClientMarkers(map, newClients) {
            const existingClientPhoneNumbers = clientMarkers.map(marker => marker.clientPhoneNumber);
            const newClientPhoneNumbers = newClients.map(client => client.phoneNumber);

            console.log("Existing: ", existingClientPhoneNumbers);
            console.log("NewC: ", newClientPhoneNumbers);
            console.log("clientsMarkers: ", clientMarkers);

            // Remove markers for clients that are not in the new list
            const clientsToRemove = clientMarkers.filter(marker => !newClientPhoneNumbers.includes(marker.clientPhoneNumber));
            clientsToRemove.forEach(marker => {
                marker.remove();
                clientMarkers.splice(clientMarkers.indexOf(marker));

            });

            // Update or add markers for the new clients
            newClients.forEach(client => {
                const index = existingClientPhoneNumbers.indexOf(client.phoneNumber);
                if (index !== -1) {
                    // Update existing marker
                    updateClientMarker(clientMarkers[index], client);
                } else {
                    // Add new marker
                    addClientMarker(map, client);
                }
            });
        }

        function addClientMarker(map, client) {
            const clientPosition = [client.longitude, client.latitude];

            let markerDiv = document.createElement('div');
            markerDiv.innerHTML =
                `<h3>${client.fullName}</h3>
                        <p>${client.email}</p>
                        <h6>${client.phoneNumber}</h6>
                        <p class="reports">Reports: ${client.reports}</p>
                        <button id="claim-button">Claim</button>`;

            let markerPopup = new tt.Popup({
                closeButton: false,
                offset: 25,
                anchor: 'bottom'
            }).setDOMContent(markerDiv);

            let markerBorder = document.createElement('div');
            markerBorder.className = 'marker-border';
            markerBorder.style.background = 'red';

            let markerIcon = document.createElement('div');
            markerIcon.className = 'marker-icon';
            markerIcon.style.backgroundImage = 'url(/images/client-icon.png)';
            markerBorder.appendChild(markerIcon);

            const newMarker = new tt.Marker({
                element: markerBorder
            }).setLngLat(clientPosition).setPopup(markerPopup);

            newMarker.addTo(map);
            newMarker.clientPhoneNumber = client.phoneNumber; // Store client phone number in the marker

            clientMarkers.push(newMarker);
        }

        function getNearestClients(map, currentPosition) {
            fetch(`/Taxi/GetNearestClients?currentClientLongitude=${currentPosition[0]}&currentClientLatitude=${currentPosition[1]}`)
                .then(response => response.json())
                .then(nearestClients => {
                    console.log(nearestClients);
                    if (Array.isArray(nearestClients)) {
                        updateClientMarkers(map, nearestClients);
                    }
                    else {
                        console.error('Invalid response format:', nearestClients);
                    }
                })
                .catch(error => {
                    console.error('Error fetching nearest clients:', error);
                });
        }


        function sendLocationToServer(longitude, latitude) {
            const locationData = {
                longitude: longitude,
                latitude: latitude
            };

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/Taxi/UpdateLocation', true);
            xhr.setRequestHeader('Content-Type', 'application/json');

            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        console.log('Location update successful:', xhr.responseText);
                    } else {
                        console.error('Error updating location. Status code:', xhr.status);
                    }
                }
            };

            const jsonData = JSON.stringify(locationData);
            xhr.send(jsonData);
        }

        function initMap() {
            navigator.geolocation.getCurrentPosition(
                position => {
                    const userPosition = [position.coords.longitude, position.coords.latitude];
                    sendLocationToServer(userPosition[0], userPosition[1]);

                    const map = tt.map({
                        key: "MVjOYcUAh8yzcRi8zYnynWAhvqtASz8G",
                        container: 'map',
                        center: userPosition,
                        zoom: 13
                    });
                    let div = document.createElement('div');
                    div.innerHTML = '<p>You</p>';

                    let popup = new tt.Popup({
                        closeButton: false,
                        offset: 25,
                        anchor: 'bottom'
                    }).setDOMContent(div);

                    let border = document.createElement('div');
                    border.className = 'marker-border';

                    let icon = document.createElement('div');
                    icon.className = 'marker-icon';
                    icon.style.backgroundImage = 'url(/images/taxi-icon.png)';
                    border.appendChild(icon);

                    let marker = new tt.Marker({
                        element: border
                    }).setLngLat(userPosition).setPopup(popup);

                    marker.addTo(map);

                    getNearestDrivers(map, userPosition);
                    getNearestClients(map, userPosition);

                    setInterval(function () {
                        const currentPosition = [userPosition[0] += 0.0001, userPosition[1]];

                        navigator.geolocation.getCurrentPosition(
                            newPosition => {
                                const newDriverPosition = [userPosition[0] += 0.0001, userPosition[1]];

                                marker.setLngLat(currentPosition);
                                sendLocationToServer(currentPosition[0], currentPosition[1]);
                            },
                            error => {
                                console.error('Error getting user location:', error);
                            },
                            {
                                enableHighAccuracy: true
                            }
                        );

                        getNearestDrivers(map, userPosition);
                        getNearestClients(map, userPosition);

                    }, 6000); // Repeat every 6 seconds
                },
                error => {
                    console.error('Error getting user location:', error);
                },
                {
                    enableHighAccuracy: true
                }
            );
        }

        window.onload = initMap;
    </script>
</body>

</html>